{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-15T08:28:09.081627Z",
     "start_time": "2020-05-15T08:28:09.073971Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from selenium import webdriver\n",
    "from time import time, sleep\n",
    "\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "import joblib\n",
    "import time\n",
    "from selenium.common import exceptions  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-15T08:28:09.618909Z",
     "start_time": "2020-05-15T08:28:09.591633Z"
    },
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "def scrape_weather_data(year):\n",
    "\n",
    "    day_dict = {}\n",
    "\n",
    "    for month_value in range(1,13):\n",
    "        url = 'https://www.timeanddate.com/weather/australia/melbourne/historic?month={}&year={}'.format(month_value, year)\n",
    "        driver = webdriver.Chrome(executable_path='/Users/Jewel/Desktop/GA/DSI12-lessons/week05/day3_regular_expressions/selenium-examples/driver/chromedriver')\n",
    "        driver.get('https://www.timeanddate.com/weather/australia/melbourne/historic?month={}&year={}'.format(month_value, year))\n",
    "\n",
    "        #drop down menu html\n",
    "        select = driver.find_element_by_id('wt-his-select')\n",
    "\n",
    "        #remove pop ups from screen\n",
    "        cookiebar = driver.find_element_by_class_name(\"form-submit-row\")\n",
    "        cookies = cookiebar.find_element_by_tag_name(\"button\")\n",
    "        cookies.click()\n",
    "\n",
    "        date_row = []\n",
    "\n",
    "        elements = select.find_elements_by_tag_name('option')\n",
    "\n",
    "        date = []\n",
    "\n",
    "        #for each drop down option\n",
    "        for option in elements:\n",
    "\n",
    "            hourly_record = []\n",
    "            option.click()\n",
    "            time.sleep(1)\n",
    "\n",
    "            table = driver.find_element_by_id('wt-his')\n",
    "            rows = table.find_elements_by_tag_name(\"tr\")\n",
    "\n",
    "            #add each hour of day's table to list hourly_record\n",
    "            for row in rows:\n",
    "                try:\n",
    "                    hourly_record.append(row.text)\n",
    "                except:\n",
    "                    exceptions.StaleElementReferenceException\n",
    "\n",
    "            date.append(' '.join(hourly_record[2].split(' ')[1:3]))\n",
    "\n",
    "            #add entire day to date_row list\n",
    "            date_row.append(hourly_record[2:-1])\n",
    "\n",
    "        full_date_row = []\n",
    "        for i, day in enumerate(date_row):\n",
    "\n",
    "            day_list = date_row[i][0].split(' ')[3:]\n",
    "            day_list.insert(0, date_row[i][0].split('\\n', 1)[0])\n",
    "            date_row[i][0] = ' '.join(day_list)\n",
    "            full_date_row.append(date_row[i])\n",
    "\n",
    "        values = []\n",
    "\n",
    "        for index, r in enumerate(full_date_row):\n",
    "            day_values = []\n",
    "            for z in r:\n",
    "                values.append(z + ' ' + date[index])\n",
    "\n",
    "        day_dict[month_value] = values\n",
    "    \n",
    "    return day_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2020-05-15T08:28:16.427Z"
    }
   },
   "outputs": [],
   "source": [
    "weather_2019 = scrape_weather_data(2019)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-15T08:00:18.465801Z",
     "start_time": "2020-05-15T08:00:18.451363Z"
    }
   },
   "outputs": [],
   "source": [
    "def save_scraped(year, num_year):\n",
    "    df = pd.concat([pd.DataFrame(year[1]),pd.DataFrame(year[2]),pd.DataFrame(year[3]),\n",
    "                    pd.DataFrame(year[4]),pd.DataFrame(year[5]),pd.DataFrame(year[6]),\n",
    "                    pd.DataFrame(year[7]),pd.DataFrame(year[8]),pd.DataFrame(year[9]),\n",
    "                    pd.DataFrame(year[10]),pd.DataFrame(year[11]),pd.DataFrame(year[12])])\n",
    "\n",
    "    df.to_csv('/Users/Jewel/Desktop/capstone - melbourne data/weather_{}.csv'.format(num_year), header = df.columns, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-15T08:00:23.456997Z",
     "start_time": "2020-05-15T08:00:23.299993Z"
    }
   },
   "outputs": [],
   "source": [
    "save_scraped(weather_2019, 2019)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-15T08:00:26.768021Z",
     "start_time": "2020-05-15T08:00:25.949559Z"
    }
   },
   "outputs": [],
   "source": [
    "def clean_weather_data(year):\n",
    "    df = pd.read_csv('/Users/Jewel/Desktop/capstone - melbourne data/weather_{}.csv'.format(year))\n",
    "    hour = []\n",
    "    temp = []\n",
    "    humidity = []\n",
    "    barometer = []\n",
    "    day = []\n",
    "    month = []\n",
    "\n",
    "    for x in df.iloc[:,0]:\n",
    "        x = x.split(' ')\n",
    "        for index, y in enumerate(x):\n",
    "            if '%' in y:\n",
    "                humidity.append(y)\n",
    "                hour.append(x[0])\n",
    "                temp.append(x[1])\n",
    "                day.append(x[-2])\n",
    "                month.append(x[-1])\n",
    "\n",
    "                try:\n",
    "                    if x[index] != 'mbar':\n",
    "                        barometer.append(x[index + 1])\n",
    "                except:\n",
    "                    pass\n",
    "\n",
    "               \n",
    "\n",
    "    \n",
    "    clean_df = pd.DataFrame({'year': year, 'month': month, 'day': day, 'hour': hour, 'temp': temp, 'humidity': humidity,\n",
    "             'barometer': barometer})\n",
    "\n",
    "    clean_df['humidity'] = [x.replace('%', '') for x in clean_df.humidity]\n",
    "    \n",
    "    clean_df.month = clean_df.month.replace({'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6, 'Jul': 7, 'Aug': 8, 'Sep': 9,\n",
    "                         'Oct': 10, 'Nov': 11, 'Dec': 12})\n",
    "    \n",
    "    \n",
    "    clean_df.day = clean_df.day.astype('int')\n",
    "    clean_df.temp = clean_df.temp.astype('int')\n",
    "    clean_df.humidity = clean_df.humidity.astype('int')\n",
    "    clean_df.barometer = clean_df.barometer.astype('int')\n",
    "    \n",
    "    \n",
    "    clean_df['hour'] = pd.to_datetime(clean_df['hour'], format='%H:%M').dt.hour\n",
    "    clean_df['datetime'] =  pd.to_datetime(clean_df[['year', 'month', 'day', 'hour']])\n",
    "\n",
    "    clean_df.set_index('datetime', inplace = True)\n",
    "    \n",
    "    new_df = clean_df[['temp', 'humidity', 'barometer']]\n",
    "    hourly = new_df.resample('H').mean()\n",
    "    hourly.index = pd.DatetimeIndex(hourly.index).to_period('H')\n",
    "    \n",
    "    return hourly.resample('D').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-15T08:00:32.058307Z",
     "start_time": "2020-05-15T08:00:31.824054Z"
    }
   },
   "outputs": [],
   "source": [
    "clean_2019 = clean_weather_data(2019)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-15T08:00:40.949951Z",
     "start_time": "2020-05-15T08:00:40.935156Z"
    }
   },
   "outputs": [],
   "source": [
    "clean_2019.to_csv('/Users/Jewel/Desktop/capstone - melbourne data/clean_weather_2019.csv', header = clean_2019.columns, index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-14T17:02:28.739934Z",
     "start_time": "2020-05-14T17:02:28.620929Z"
    }
   },
   "outputs": [],
   "source": [
    "hour = []\n",
    "temp = []\n",
    "humidity = []\n",
    "barometer = []\n",
    "day = []\n",
    "month = []\n",
    "\n",
    "for x in w_2011.iloc[:,0]:\n",
    "    x = x.split(' ')\n",
    "    hour.append(x[0])\n",
    "    temp.append(x[1])\n",
    "    day.append(x[-2])\n",
    "    month.append(x[-1])\n",
    "    for index, y in enumerate(x):\n",
    "        if '%' in y:\n",
    "            humidity.append(y)\n",
    "        if y == 'mbar':\n",
    "            barometer.append(x[index-1])\n",
    "            \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-14T17:05:09.031558Z",
     "start_time": "2020-05-14T17:05:08.988618Z"
    }
   },
   "outputs": [],
   "source": [
    "clean_2011 = pd.DataFrame({'year': 2011, 'month': month, 'day': day, 'hour': hour, 'temp': temp, 'humidity': humidity,\n",
    "             'barometer': barometer})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-14T17:05:09.807000Z",
     "start_time": "2020-05-14T17:05:09.787592Z"
    }
   },
   "outputs": [],
   "source": [
    "clean_2011['humidity'] = [x.replace('%', '') for x in clean_2011.humidity]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-14T17:05:10.123509Z",
     "start_time": "2020-05-14T17:05:10.106648Z"
    }
   },
   "outputs": [],
   "source": [
    "clean_2011.month.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-14T17:05:10.512599Z",
     "start_time": "2020-05-14T17:05:10.452268Z"
    }
   },
   "outputs": [],
   "source": [
    "clean_2011.month = clean_2011.month.replace({'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6, 'Jul': 7, 'Aug': 8, 'Sep': 9,\n",
    "                         'Oct': 10, 'Nov': 11, 'Dec': 12})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-14T17:05:10.819445Z",
     "start_time": "2020-05-14T17:05:10.803822Z"
    }
   },
   "outputs": [],
   "source": [
    "clean_2011.temp.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-14T17:05:11.386641Z",
     "start_time": "2020-05-14T17:05:11.327794Z"
    }
   },
   "outputs": [],
   "source": [
    "clean_2011.day = clean_2011.day.astype('int')\n",
    "clean_2011.temp = clean_2011.temp.astype('int')\n",
    "clean_2011.humidity = clean_2011.humidity.astype('int')\n",
    "clean_2011.barometer = clean_2011.barometer.astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-14T17:05:11.805038Z",
     "start_time": "2020-05-14T17:05:11.793517Z"
    }
   },
   "outputs": [],
   "source": [
    "clean_2011.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-14T17:05:35.843714Z",
     "start_time": "2020-05-14T17:05:35.801044Z"
    }
   },
   "outputs": [],
   "source": [
    "clean_2011['hour'] = pd.to_datetime(clean_2011['hour'], format='%H:%M').dt.hour\n",
    "clean_2011['datetime'] =  pd.to_datetime(clean_2011[['year', 'month', 'day', 'hour']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-14T17:06:05.498496Z",
     "start_time": "2020-05-14T17:06:05.492091Z"
    }
   },
   "outputs": [],
   "source": [
    "clean_2011.set_index('datetime', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-14T17:06:59.520192Z",
     "start_time": "2020-05-14T17:06:59.481689Z"
    }
   },
   "outputs": [],
   "source": [
    "df = clean_2011[['temp', 'humidity', 'barometer']]\n",
    "hourly = df.resample('H').mean()\n",
    "hourly.index = pd.DatetimeIndex(hourly.index).to_period('H')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-05-14T17:07:21.492464Z",
     "start_time": "2020-05-14T17:07:21.467709Z"
    }
   },
   "outputs": [],
   "source": [
    "hourly.resample('D').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
